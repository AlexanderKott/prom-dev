package ru.netology.coroutines.dto

import kotlinx.coroutines.*
import kotlin.coroutines.EmptyCoroutineContext


/*
Вопросы: Cancellation
1 Этот окей не выведется потому что в корутине дочерней установлена задержка (засыпание)
на 500 милисекунд, а у главного потока задержка всего 100, поэтому главный поток успеет проснуться
и все отменить.

2 Окей не выведется потому что он засыпает на 500 миллисекунд, а родительский поток его
отменяет уже через 100. второй ок выведится потому что его никто не отменял и еще потому
что написано job.join() в конце, а это заставаляет все программу ждать пока выполнятся
все корутины

Вопросы: Exception Handling (ответил не все)
1 Нет, строка не сработает по причине того что try-catch написан не правильно.
Правильно это поместить try-catch внутрь launch

2 Оно сработает из за coroutineScope. Но я не понимаю что оно такое. И уже не помню
где это смотреть.=) с удовольствием послушал бы объянение

3 Из лекции я так и не понял разницу между ланчерами корутин и скопами типо supervisorScope
понятно что из заних, но не понятна разница

4 Нет, не сработает потому что если произошла ошибка то убиваются все корутины внутри, чтобы
не убивались надо заменить coroutineScope  на supervisorScope


5 да, сработает потому что supervisorScope сделал корутины не зависящами от ошибок друг друга


6 Exception срабатывает первым и останавливает остальные корутины и потому ничего не выведится.
Потому что ошибка и корутины были в одном внутреннем контексте, а он как раз аварийно завершился.

7 Не выведится, потому что Exception не смотря на SupervisorJob отменяет родительскую джобу,
а она в свою очердь отменят дочерние. потому ок не выведится
 */



fun main() {
    CoroutineScope(EmptyCoroutineContext).launch {
        CoroutineScope(EmptyCoroutineContext + SupervisorJob()).launch {
            launch {
                delay(1000)
                println("ok") // <--
            }
            launch {
                delay(500)
                println("ok")
            }
            throw Exception("something bad happened")
        }
    }
    Thread.sleep(10000)
}